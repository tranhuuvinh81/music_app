// frontend/src/components/LyricsViewer.js
import React, { useContext, useMemo, useEffect, useRef, useState } from 'react';
import { AudioContext } from '../context/AudioContext';
import api from '../api/api'; // D√πng ƒë·ªÉ l·∫•y baseURL

// 1. H√†m helper ƒë·ªÉ ph√¢n t√≠ch chu·ªói LRC
// Input: "[00:10.75]D√≤ng lyric..."
// Output: { time: 10.75, text: "D√≤ng lyric..." }
const parseLRC = (lrcString) => {
  if (!lrcString) return [];
  
  const lines = lrcString.split('\n');
  const parsed = [];

  const timeRegex = /\[(\d{2}):(\d{2})\.(\d{2,3})\]/; // [mm:ss.xx] ho·∫∑c [mm:ss.xxx]

  for (const line of lines) {
    const match = line.match(timeRegex);
    if (match) {
      const minutes = parseInt(match[1], 10);
      const seconds = parseInt(match[2], 10);
      // X·ª≠ l√Ω 2 ho·∫∑c 3 s·ªë miligi√¢y
      const milliseconds = parseInt(match[3].padEnd(3, '0'), 10); 
      
      const time = minutes * 60 + seconds + milliseconds / 1000;
      
      const text = line.substring(match[0].length).trim();
      
      if (text || line.trim() === match[0]) { // Gi·ªØ c·∫£ d√≤ng tr·ªëng (n·∫øu c√≥ nh·∫°c d·∫°o)
        parsed.push({ time, text: text || '...' }); // Thay d√≤ng tr·ªëng b·∫±ng '...'
      }
    }
  }
  return parsed.sort((a, b) => a.time - b.time);
};

function LyricsViewer() {
  // L·∫•y URL v√† currentTime t·ª´ Context
  const { currentLyricsUrl, currentTime } = useContext(AudioContext);
  
  // State n·ªôi b·ªô ƒë·ªÉ l∆∞u n·ªôi dung file .lrc
  const [lrcContent, setLrcContent] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  
  const activeLineRef = useRef(null); // Ref cho d√≤ng lyric ƒëang active

  // 2. useEffect ƒë·ªÉ T·∫¢I file .lrc khi URL thay ƒë·ªïi
  // üëá THAY TH·∫æ TO√ÄN B·ªò useEffect N√ÄY B·∫∞NG ƒêO·∫†N CODE B√äN D∆Ø·ªöI
  useEffect(() => {
    if (!currentLyricsUrl) {
      console.log("LyricsViewer: Kh√¥ng c√≥ lyrics_url, d·ª´ng l·∫°i.");
      setLrcContent(null);
      return;
    }

    const fetchLyrics = async () => {
      setIsLoading(true);
      console.log("LyricsViewer: B·∫Øt ƒë·∫ßu t·∫£i lyrics t·ª´:", currentLyricsUrl);
      
      try {
        const fullUrl = `${api.defaults.baseURL}${currentLyricsUrl}`;
        console.log("LyricsViewer: URL ƒë·∫ßy ƒë·ªß l√†:", fullUrl);

        const response = await fetch(fullUrl); 
        
        console.log("LyricsViewer: Tr·∫°ng th√°i fetch:", response.status, response.statusText);

        if (!response.ok) {
          throw new Error(`Kh√¥ng t√¨m th·∫•y file lyric (l·ªói ${response.status})`);
        }
        
        const text = await response.text();
        console.log("LyricsViewer: T·∫£i th√†nh c√¥ng! N·ªôi dung file (100 k√Ω t·ª± ƒë·∫ßu):", text.substring(0, 100));
        
        setLrcContent(text); // K√≠ch ho·∫°t useMemo ƒë·ªÉ parse

      } catch (err) {
        console.error("LyricsViewer: L·ªói khi t·∫£i file lyric:", err);
        setLrcContent(null);
      }
      setIsLoading(false);
    };

    fetchLyrics();
  }, [currentLyricsUrl]);// Ch·∫°y l·∫°i khi ƒë·ªïi b√†i (url thay ƒë·ªïi)

  // 3. Ph√¢n t√≠ch LRC (Ph·ª• thu·ªôc v√†o lrcContent)
// üëá TH√äM CONSOLE LOG N√ÄY V√ÄO SAU useMemo
  const parsedLyrics = useMemo(() => {
    const result = parseLRC(lrcContent);
    // Log k·∫øt qu·∫£ c·ªßa vi·ªác parse
    console.log("LyricsViewer: K·∫øt qu·∫£ parse:", result);
    return result;
  }, [lrcContent]);
  // 4. T√¨m d√≤ng active
  const activeLineIndex = useMemo(() => {
    if (parsedLyrics.length === 0) return -1;
    
    // T√¨m index c·ªßa d√≤ng lyric ƒê·∫¶U TI√äN c√≥ 'time' > 'currentTime'
    let index = parsedLyrics.findIndex(line => line.time > currentTime);
    
    if (index === -1) {
      // N·∫øu kh√¥ng t√¨m th·∫•y (ƒëang ·ªü cu·ªëi b√†i), active d√≤ng cu·ªëi
      return parsedLyrics.length - 1;
    }
    // N·∫øu kh√¥ng, active d√≤ng ngay TR∆Ø·ªöC ƒê√ì
    return Math.max(0, index - 1);

  }, [currentTime, parsedLyrics]);
  
  // 5. T·ª± ƒë·ªông cu·ªôn
  useEffect(() => {
    if (activeLineRef.current) {
      activeLineRef.current.scrollIntoView({
        behavior: 'smooth',
        block: 'center', // Cu·ªôn v√†o gi·ªØa
      });
    }
  }, [activeLineIndex]); // K√≠ch ho·∫°t m·ªói khi d√≤ng active thay ƒë·ªïi

  // 6. Render
  if (isLoading) {
    return (
      <div className="h-full flex items-center justify-center text-gray-400">
        ƒêang t·∫£i l·ªùi b√†i h√°t...
      </div>
    );
  }

  if (!lrcContent || parsedLyrics.length === 0) {
    return (
      <div className="h-full flex items-center justify-center text-gray-500">
        Kh√¥ng c√≥ l·ªùi b√†i h√°t cho b√†i n√†y.
      </div>
    );
  }

  return (
    <div className="h-full overflow-y-auto p-4 text-center scrollbar-hide">
      <ul className="space-y-5 py-24"> 
        {/* Th√™m padding tr√™n d∆∞·ªõi ƒë·ªÉ d√≤ng ƒë·∫ßu/cu·ªëi c√≥ th·ªÉ cu·ªôn v√†o gi·ªØa */}
        {parsedLyrics.map((line, index) => {
          const isActive = index === activeLineIndex;
          return (
            <li
              key={`${line.time}-${index}`}
              ref={isActive ? activeLineRef : null} 
              className={`
                text-xl md:text-2xl transition-all duration-300 ease-in-out
                ${isActive 
                  ? 'font-bold text-white scale-105' // N·ªïi b·∫≠t d√≤ng active
                  : 'text-gray-500' // L√†m m·ªù d√≤ng kh√¥ng active
                }
              `}
            >
              {line.text}
            </li>
          );
        })}
      </ul>
    </div>
  );
}

export default LyricsViewer;