import React, { useState, useEffect, useCallback } from 'react';
import api from '../api/api';
import SongForm from '../components/SongForm';
import UserForm from '../components/UserForm'; // üëà 1. Import UserForm

function AdminDashboard() {
  const [users, setUsers] = useState([]);
  const [songs, setSongs] = useState([]);
  
  // State cho Song Form
  const [showSongForm, setShowSongForm] = useState(false);
  const [editingSong, setEditingSong] = useState(null);

  // üëá 2. Th√™m state cho User Form
  const [showUserForm, setShowUserForm] = useState(false);
  const [editingUser, setEditingUser] = useState(null);

  const fetchUsers = useCallback(() => {
    api.get('/api/users').then(res => setUsers(res.data)).catch(console.error);
  }, []);

  const fetchSongs = useCallback(() => {
    api.get('/api/songs').then(res => setSongs(res.data)).catch(console.error);
  }, []);

  useEffect(() => {
    fetchUsers();
    fetchSongs();
  }, [fetchUsers, fetchSongs]);

  // --- Logic cho User ---
  // üëá 3. Th√™m c√°c h√†m x·ª≠ l√Ω cho User Form
  const handleEditUserClick = (user) => {
    setEditingUser(user);
    setShowUserForm(true);
  };
  
  const handleUserFormSubmit = () => {
    setShowUserForm(false);
    setEditingUser(null);
    fetchUsers(); // T·∫£i l·∫°i danh s√°ch user
  };

  const handleUserFormCancel = () => {
    setShowUserForm(false);
    setEditingUser(null);
  };

  const deleteUser = (userId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?')) {
      api.delete(`/api/users/${userId}`).then(fetchUsers).catch(console.error);
    }
  }

  // --- Logic cho Song (gi·ªØ nguy√™n) ---
  const handleAddSongClick = () => {
    setEditingSong(null);
    setShowSongForm(true);
  };

  const handleEditSongClick = (song) => {
    setEditingSong(song);
    setShowSongForm(true);
  };

  const deleteSong = (songId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√†i h√°t n√†y?')) {
      api.delete(`/api/songs/${songId}`).then(fetchSongs).catch(console.error);
    }
  }

  const handleSongFormSubmit = () => {
    setShowSongForm(false);
    setEditingSong(null);
    fetchSongs();
  };

  const handleSongFormCancel = () => {
    setShowSongForm(false);
    setEditingSong(null);
  };

  return (
    <div>
      <h1>Trang qu·∫£n tr·ªã</h1>
      
      {/* --- FORM MODALS --- */}
      {showSongForm && (
        <SongForm
          songToEdit={editingSong}
          onFormSubmit={handleSongFormSubmit}
          onCancel={handleSongFormCancel}
        />
      )}
      {/* üëá 4. Render UserForm khi c·∫ßn */}
      {showUserForm && (
        <UserForm
          userToEdit={editingUser}
          onFormSubmit={handleUserFormSubmit}
          onCancel={handleUserFormCancel}
        />
      )}

      {/* --- B·∫¢NG QU·∫¢N L√ù USER --- */}
      <section>
        <h2>Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h2>
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Username</th>
              <th>Email</th>
              <th>Role</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {users.map(user => (
              <tr key={user.id}>
                <td>{user.id}</td>
                <td>{user.username}</td>
                <td>{user.email}</td>
                <td>{user.role}</td>
                <td>
                  {/* üëá 5. Th√™m n√∫t S·ª≠a cho User */}
                  <button className="btn-edit" onClick={() => handleEditUserClick(user)}>S·ª≠a</button>
                  <button className="btn-delete" onClick={() => deleteUser(user.id)}>X√≥a</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </section>

      {/* --- B·∫¢NG QU·∫¢N L√ù B√ÄI H√ÅT (gi·ªØ nguy√™n) --- */}
      <section>
        <div className="section-header">
          <h2>Qu·∫£n l√Ω b√†i h√°t</h2>
          <button onClick={handleAddSongClick}>+ Th√™m b√†i h√°t m·ªõi</button>
        </div>
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Ti√™u ƒë·ªÅ</th>
              <th>Ngh·ªá sƒ©</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {songs.map(song => (
              <tr key={song.id}>
                <td>{song.id}</td>
                <td>{song.title}</td>
                <td>{song.artist}</td>
                <td>
                  <button className="btn-edit" onClick={() => handleEditSongClick(song)}>S·ª≠a</button>
                  <button className="btn-delete" onClick={() => deleteSong(song.id)}>X√≥a</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </section>
    </div>
  );
}

export default AdminDashboard;