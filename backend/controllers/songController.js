// backend/controllers/songController.js (updated - add image_url handling)
import db from "../config/db.js";

// üîπ L·∫•y t·∫•t c·∫£ b√†i h√°t
export const getAllSongs = (req, res) => {
  const query = "SELECT * FROM songs ORDER BY created_at DESC";
  db.query(query, (err, results) => {
    if (err) return res.status(500).json({ error: "L·ªói khi truy v·∫•n b√†i h√°t" });
    res.json(results);
  });
};

// üîπ L·∫•y b√†i h√°t theo ID
export const getSongById = (req, res) => {
  const { id } = req.params;
  const query = "SELECT * FROM songs WHERE id = ?";
  db.query(query, [id], (err, results) => {
    if (err) return res.status(500).json({ error: "L·ªói khi truy v·∫•n b√†i h√°t" });
    if (results.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });
    res.json(results[0]);
  });
};

export const addSong = (req, res) => {
  const { title, artist, album, genre, release_year } = req.body;

  if (!title || !artist) {
    return res.status(400).json({ error: "Thi·∫øu ti√™u ƒë·ªÅ ho·∫∑c ngh·ªá sƒ©" });
  }
  if (!req.files || !req.files.songFile) {
    return res.status(400).json({ error: "Vui l√≤ng upload file nh·∫°c" });
  }

  const file_url = `/uploads/songs/${req.files.songFile[0].filename}`;
  let image_url = null;
  if (req.files.imageFile) {
    image_url = `/uploads/images/${req.files.imageFile[0].filename}`;
  }

  const query = `INSERT INTO songs (title, artist, album, genre, release_year, file_url, image_url) VALUES (?, ?, ?, ?, ?, ?, ?)`;
  db.query(query, [title, artist, album, genre, release_year, file_url, image_url], (err, result) => {
    if (err) return res.status(500).json({ error: "L·ªói khi th√™m b√†i h√°t", details: err.message });
    res.status(201).json({ message: "Th√™m b√†i h√°t th√†nh c√¥ng", id: result.insertId });
  });
};

export const updateSong = (req, res) => {
  const { id } = req.params;
  const { title, artist, album, genre, release_year } = req.body;
  let file_url;
  let image_url;

  // L·∫•y file_url v√† image_url c≈©
  db.query("SELECT file_url, image_url FROM songs WHERE id = ?", [id], (err, results) => {
    if (err) return res.status(500).json({ error: "L·ªói truy v·∫•n" });
    if (results.length === 0) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });

    file_url = results[0].file_url;
    image_url = results[0].image_url;

    // N·∫øu c√≥ file m·ªõi ƒë∆∞·ª£c upload th√¨ c·∫≠p nh·∫≠t
    if (req.files) {
      if (req.files.songFile) {
        file_url = `/uploads/songs/${req.files.songFile[0].filename}`;
      }
      if (req.files.imageFile) {
        image_url = `/uploads/images/${req.files.imageFile[0].filename}`;
      }
    }

    const query = `UPDATE songs SET title=?, artist=?, album=?, genre=?, release_year=?, file_url=?, image_url=? WHERE id=?`;
    db.query(query, [title, artist, album, genre, release_year, file_url, image_url, id], (err, result) => {
      if (err) return res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t b√†i h√°t" });
      if (result.affectedRows === 0) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });
      res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
    });
  });
};
// üîπ X√≥a b√†i h√°t (ch·ªâ admin)
export const deleteSong = (req, res) => {
  const { id } = req.params;
  db.query("DELETE FROM songs WHERE id = ?", [id], (err, result) => {
    if (err) return res.status(500).json({ error: "L·ªói khi x√≥a b√†i h√°t" });
    if (result.affectedRows === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });
    res.json({ message: "X√≥a b√†i h√°t th√†nh c√¥ng" });
  });
};


// üîπ T√¨m ki·∫øm b√†i h√°t
export const searchSongs = (req, res) => {
  const { q } = req.query; // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ query param ?q=...

  if (!q) {
    return res.status(400).json({ error: "Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm" });
  }

  const searchTerm = `%${q}%`;
  const query = "SELECT * FROM songs WHERE title LIKE ? OR artist LIKE ?";
  
  db.query(query, [searchTerm, searchTerm], (err, results) => {
    if (err) return res.status(500).json({ error: "L·ªói khi t√¨m ki·∫øm b√†i h√°t" });
    res.json(results);
  });
};