// // backend/controllers/songController.js
// import db from "../config/db.js";

// // L·∫•y t·∫•t c·∫£ b√†i h√°t
// export const getAllSongs = (req, res) => {
//   const query = "SELECT * FROM songs ORDER BY created_at DESC";
//   db.query(query, (err, results) => {
//     if (err) return res.status(500).json({ error: "L·ªói khi truy v·∫•n b√†i h√°t" });
//     res.json(results);
//   });
// };

// // L·∫•y b√†i h√°t theo ID
// export const getSongById = (req, res) => {
//   const { id } = req.params;
//   const query = "SELECT * FROM songs WHERE id = ?";
//   db.query(query, [id], (err, results) => {
//     if (err) return res.status(500).json({ error: "L·ªói khi truy v·∫•n b√†i h√°t" });
//     if (results.length === 0)
//       return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });
//     res.json(results[0]);
//   });
// };

// export const addSong = (req, res) => {
//   const { title, artist, album, genre, release_year } = req.body;

//   if (!title || !artist) {
//     return res.status(400).json({ error: "Thi·∫øu ti√™u ƒë·ªÅ ho·∫∑c ngh·ªá sƒ©" });
//   }
//   if (!req.files || !req.files.songFile) {
//     return res.status(400).json({ error: "Vui l√≤ng upload file nh·∫°c" });
//   }

//   const file_url = `/uploads/songs/${req.files.songFile[0].filename}`;
//   let image_url = null;
//   if (req.files.imageFile) {
//     image_url = `/uploads/images/${req.files.imageFile[0].filename}`;
//   }

//   // LOGIC L·∫§Y LYRICS_URL
//   let lyrics_url = null;
//   if (req.files.lyricFile) {
//     lyrics_url = `/uploads/lyrics/${req.files.lyricFile[0].filename}`;
//   }

//   // C·∫¨P NH·∫¨T QUERY
//   const query = `INSERT INTO songs (title, artist, album, genre, release_year, file_url, image_url, lyrics_url) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`;
//   // C·∫¨P NH·∫¨T THAM S·ªê
//   db.query(
//     query,
//     [
//       title,
//       artist,
//       album,
//       genre,
//       release_year,
//       file_url,
//       image_url,
//       lyrics_url,
//     ],
//     (err, result) => {
//       if (err)
//         return res
//           .status(500)
//           .json({ error: "L·ªói khi th√™m b√†i h√°t", details: err.message });
//       res
//         .status(201)
//         .json({ message: "Th√™m b√†i h√°t th√†nh c√¥ng", id: result.insertId });
//     }
//   );
// };

// export const updateSong = (req, res) => {
//   const { id } = req.params;
//   const { title, artist, album, genre, release_year } = req.body;
//   let file_url;
//   let image_url;
//   let lyrics_url;

//   // L·∫•y file_url v√† image_url c≈©
//   db.query(
//     "SELECT file_url, image_url FROM songs WHERE id = ?",
//     [id],
//     (err, results) => {
//       if (err) return res.status(500).json({ error: "L·ªói truy v·∫•n" });
//       if (results.length === 0)
//         return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });

//       file_url = results[0].file_url;
//       image_url = results[0].image_url;
//       lyrics_url = results[0].lyrics_url; // üëà L·∫§Y LYRICS C≈®

//       // N·∫øu c√≥ file m·ªõi ƒë∆∞·ª£c upload th√¨ c·∫≠p nh·∫≠t
//       if (req.files) {
//         if (req.files.songFile) {
//           file_url = `/uploads/songs/${req.files.songFile[0].filename}`;
//         }
//         if (req.files.imageFile) {
//           image_url = `/uploads/images/${req.files.imageFile[0].filename}`;
//         }
//         // LOGIC C·∫¨P NH·∫¨T LYRICS
//         if (req.files.lyricFile) {
//           lyrics_url = `/uploads/lyrics/${req.files.lyricFile[0].filename}`;
//         }
//       }

//       // C·∫¨P NH·∫¨T QUERY
//       const query = `UPDATE songs SET title=?, artist=?, album=?, genre=?, release_year=?, file_url=?, image_url=?, lyrics_url=? WHERE id=?`;
//       // C·∫¨P NH·∫¨T THAM S·ªê
//       db.query(
//         query,
//         [
//           title,
//           artist,
//           album,
//           genre,
//           release_year,
//           file_url,
//           image_url,
//           lyrics_url,
//           id,
//         ],
//         (err, result) => {
//           if (err)
//             return res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t b√†i h√°t" });
//           if (result.affectedRows === 0)
//             return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });
//           res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
//         }
//       );
//     }
//   );
// };
// // X√≥a b√†i h√°t (ch·ªâ admin)
// export const deleteSong = (req, res) => {
//   const { id } = req.params;
//   db.query("DELETE FROM songs WHERE id = ?", [id], (err, result) => {
//     if (err) return res.status(500).json({ error: "L·ªói khi x√≥a b√†i h√°t" });
//     if (result.affectedRows === 0)
//       return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });
//     res.json({ message: "X√≥a b√†i h√°t th√†nh c√¥ng" });
//   });
// };

// // T√¨m ki·∫øm b√†i h√°t
// export const searchSongs = (req, res) => {
//   const { q } = req.query; // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ query param ?q=...

//   if (!q) {
//     return res.status(400).json({ error: "Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm" });
//   }

//   const searchTerm = `%${q}%`;
//   const query = "SELECT * FROM songs WHERE title LIKE ? OR artist LIKE ?";

//   db.query(query, [searchTerm, searchTerm], (err, results) => {
//     if (err) return res.status(500).json({ error: "L·ªói khi t√¨m ki·∫øm b√†i h√°t" });
//     res.json(results);
//   });
// };

// // L·∫•y danh s√°ch ngh·ªá sƒ© unique
// export const getArtists = (req, res) => {
//   const query = "SELECT artist FROM songs WHERE artist IS NOT NULL";
//   db.query(query, (err, results) => {
//     if (err)
//       return res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch ngh·ªá sƒ©" });

//     const allArtists = new Set();
//     results.forEach((row) => {
//       const artists = row.artist
//         .split(/[,/&]+/)
//         .map((a) => a.trim())
//         .filter((a) => a);
//       artists.forEach((a) => allArtists.add(a));
//     });
//     res.json(Array.from(allArtists).sort());
//   });
// };



// // L·∫•y b√†i h√°t theo ngh·ªá sƒ©
// export const getSongsByArtist = (req, res) => {
//   const { artist } = req.params;
//   const decodedArtist = decodeURIComponent(artist);
//   const searchTerm = `%${decodedArtist}%`;
//   const query = "SELECT * FROM songs WHERE artist LIKE ? ORDER BY title";
//   db.query(query, [searchTerm], (err, results) => {
//     if (err)
//       return res
//         .status(500)
//         .json({ error: "L·ªói khi l·∫•y b√†i h√°t theo ngh·ªá sƒ©" });
//     res.json(results);
//   });
// };

// // L·∫•y b√†i h√°t theo th·ªÉ lo·∫°i
// export const getSongsByGenre = (req, res) => {
//   const { genre } = req.params;
//   const query = "SELECT * FROM songs WHERE genre = ? ORDER BY title";
//   db.query(query, [decodeURIComponent(genre)], (err, results) => {
//     if (err)
//       return res
//         .status(500)
//         .json({ error: "L·ªói khi l·∫•y b√†i h√°t theo th·ªÉ lo·∫°i" });
//     res.json(results);
//   });
// };

// backend/controllers/songController.js
import db from "../config/db.js";

// --- H√ÄM HELPER (M·ªõi) ---
// H√†m n√†y s·∫Ω l·∫•y danh s√°ch ngh·ªá sƒ© ƒë·∫ßy ƒë·ªß cho m·ªôt danh s√°ch b√†i h√°t
const fetchArtistsForSongs = (songs) => {
  return new Promise((resolve, reject) => {
    if (!songs || songs.length === 0) {
      return resolve([]); // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ b√†i h√°t
    }

    const songIds = songs.map(song => song.id);
    const query = `
      SELECT sa.song_id, a.id, a.name, a.image_url 
      FROM song_artists sa
      JOIN artists a ON sa.artist_id = a.id
      WHERE sa.song_id IN (?)
    `;

    db.query(query, [songIds], (err, artistLinks) => {
      if (err) return reject(err);

      // Nh√≥m ngh·ªá sƒ© theo song_id
      const songsWithArtists = songs.map(song => {
        const artists = artistLinks
          .filter(link => link.song_id === song.id)
          .map(link => ({ id: link.id, name: link.name, image_url: link.image_url })); // Ch·ªâ l·∫•y th√¥ng tin c·∫ßn thi·∫øt
        return { ...song, artists: artists }; // Th√™m m·∫£ng artists v√†o object song
      });
      resolve(songsWithArtists);
    });
  });
};


// --- C√ÅC H√ÄM CONTROLLER ƒê√É C·∫¨P NH·∫¨T ---

// L·∫•y t·∫•t c·∫£ b√†i h√°t (c√≥ k√®m ngh·ªá sƒ©)
export const getAllSongs = async (req, res) => {
  // B·ªè c·ªôt 'artist' c≈© n·∫øu b·∫°n ch∆∞a x√≥a
  const query = "SELECT id, title, album, genre, release_year, file_url, image_url, lyrics_url, created_at FROM songs ORDER BY created_at DESC";
  db.query(query, async (err, songs) => { // Th√™m async ·ªü ƒë√¢y
    if (err) return res.status(500).json({ error: "L·ªói khi truy v·∫•n b√†i h√°t" });
    try {
      // L·∫•y th√™m th√¥ng tin ngh·ªá sƒ© cho c√°c b√†i h√°t n√†y
      const songsWithArtists = await fetchArtistsForSongs(songs);
      res.json(songsWithArtists);
    } catch (fetchErr) {
      res.status(500).json({ error: "L·ªói khi l·∫•y th√¥ng tin ngh·ªá sƒ©", details: fetchErr.message });
    }
  });
};

// L·∫•y b√†i h√°t theo ID (c√≥ k√®m ngh·ªá sƒ©)
export const getSongById = async (req, res) => {
  const { id } = req.params;
  const query = "SELECT id, title, album, genre, release_year, file_url, image_url, lyrics_url, created_at FROM songs WHERE id = ?";
  db.query(query, [id], async (err, results) => { // Th√™m async
    if (err) return res.status(500).json({ error: "L·ªói khi truy v·∫•n b√†i h√°t" });
    if (results.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });

    try {
      const song = results[0];
      const songWithArtists = await fetchArtistsForSongs([song]); // fetchArtistsForSongs nh·∫≠n m·∫£ng
      res.json(songWithArtists[0]); // Tr·∫£ v·ªÅ object b√†i h√°t duy nh·∫•t
    } catch (fetchErr) {
      res.status(500).json({ error: "L·ªói khi l·∫•y th√¥ng tin ngh·ªá sƒ©", details: fetchErr.message });
    }
  });
};

// Th√™m b√†i h√°t m·ªõi (x·ª≠ l√Ω nhi·ªÅu artistIds)
export const addSong = (req, res) => {
  // üëá NH·∫¨N artistIds L√Ä M·ªòT M·∫¢NG (vd: "[1, 2]")
  const { title, artistIds, album, genre, release_year } = req.body;

  // Chuy·ªÉn ƒë·ªïi chu·ªói JSON th√†nh m·∫£ng ID
  let parsedArtistIds = [];
  try {
    parsedArtistIds = JSON.parse(artistIds || '[]');
    if (!Array.isArray(parsedArtistIds) || parsedArtistIds.length === 0) {
      return res.status(400).json({ error: "C·∫ßn ch·ªçn √≠t nh·∫•t m·ªôt ngh·ªá sƒ©" });
    }
  } catch (parseError) {
    return res.status(400).json({ error: "ƒê·ªãnh d·∫°ng artistIds kh√¥ng h·ª£p l·ªá (c·∫ßn l√† m·∫£ng ID)" });
  }

  if (!title) {
    return res.status(400).json({ error: "Thi·∫øu ti√™u ƒë·ªÅ" });
  }
  if (!req.files || !req.files.songFile) {
    return res.status(400).json({ error: "Vui l√≤ng upload file nh·∫°c" });
  }

  const file_url = `/uploads/songs/${req.files.songFile[0].filename}`;
  const image_url = req.files.imageFile ? `/uploads/images/${req.files.imageFile[0].filename}` : null;
  const lyrics_url = req.files.lyricFile ? `/uploads/lyrics/${req.files.lyricFile[0].filename}` : null;

  // üëá B·ªé C·ªòT 'artist' C≈®
  const query = `INSERT INTO songs (title, album, genre, release_year, file_url, image_url, lyrics_url) VALUES (?, ?, ?, ?, ?, ?, ?)`;
  db.query(query, [title, album, genre, release_year, file_url, image_url, lyrics_url], (err, result) => {
    if (err) return res.status(500).json({ error: "L·ªói khi th√™m b√†i h√°t", details: err.message });

    const newSongId = result.insertId;

    // Th√™m c√°c li√™n k·∫øt v√†o b·∫£ng song_artists
    const artistLinks = parsedArtistIds.map(artistId => [newSongId, artistId]);
    if (artistLinks.length > 0) {
      const linkQuery = "INSERT INTO song_artists (song_id, artist_id) VALUES ?";
      db.query(linkQuery, [artistLinks], (linkErr) => {
        if (linkErr) {
          // C√¢n nh·∫Øc x√≥a b√†i h√°t v·ª´a t·∫°o n·∫øu li√™n k·∫øt th·∫•t b·∫°i (rollback)
          console.error("L·ªói khi li√™n k·∫øt ngh·ªá sƒ©:", linkErr);
          return res.status(500).json({ error: "L·ªói khi li√™n k·∫øt ngh·ªá sƒ©", details: linkErr.message });
        }
        res.status(201).json({ message: "Th√™m b√†i h√°t v√† li√™n k·∫øt ngh·ªá sƒ© th√†nh c√¥ng", id: newSongId });
      });
    } else {
      // Tr∆∞·ªùng h·ª£p n√†y kh√¥ng n√™n x·∫£y ra do ƒë√£ check ·ªü tr√™n
      res.status(201).json({ message: "Th√™m b√†i h√°t th√†nh c√¥ng (kh√¥ng c√≥ ngh·ªá sƒ© li√™n k·∫øt)", id: newSongId });
    }
  });
};

// C·∫≠p nh·∫≠t b√†i h√°t (x·ª≠ l√Ω nhi·ªÅu artistIds)
export const updateSong = async (req, res) => {
  const { id: songId } = req.params;
  // üëá NH·∫¨N artistIds L√Ä M·∫¢NG
  const { title, artistIds, album, genre, release_year } = req.body;

  let parsedArtistIds = [];
  try {
    parsedArtistIds = JSON.parse(artistIds || '[]');
    if (!Array.isArray(parsedArtistIds) || parsedArtistIds.length === 0) {
      return res.status(400).json({ error: "C·∫ßn ch·ªçn √≠t nh·∫•t m·ªôt ngh·ªá sƒ©" });
    }
  } catch (parseError) {
    return res.status(400).json({ error: "ƒê·ªãnh d·∫°ng artistIds kh√¥ng h·ª£p l·ªá" });
  }

  try {
    // L·∫•y th√¥ng tin file c≈©
    const getOldSongQuery = "SELECT file_url, image_url, lyrics_url FROM songs WHERE id = ?";
    db.query(getOldSongQuery, [songId], (err, results) => {
        if (err) return res.status(500).json({ error: "L·ªói truy v·∫•n b√†i h√°t c≈©" });
        if (results.length === 0) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });

        let { file_url, image_url, lyrics_url } = results[0];

        // C·∫≠p nh·∫≠t file urls n·∫øu c√≥ file m·ªõi
        if (req.files) {
          if (req.files.songFile) file_url = `/uploads/songs/${req.files.songFile[0].filename}`;
          if (req.files.imageFile) image_url = `/uploads/images/${req.files.imageFile[0].filename}`;
          if (req.files.lyricFile) lyrics_url = `/uploads/lyrics/${req.files.lyricFile[0].filename}`;
        }

        // 1. C·∫≠p nh·∫≠t b·∫£ng songs (kh√¥ng c√≤n c·ªôt artist)
        const updateSongQuery = `UPDATE songs SET title=?, album=?, genre=?, release_year=?, file_url=?, image_url=?, lyrics_url=? WHERE id=?`;
        db.query(updateSongQuery, [title, album, genre, release_year, file_url, image_url, lyrics_url, songId], (updateErr) => {
          if (updateErr) return res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t b√†i h√°t", details: updateErr.message });

          // 2. X√≥a li√™n k·∫øt ngh·ªá sƒ© c≈©
          const deleteLinksQuery = "DELETE FROM song_artists WHERE song_id = ?";
          db.query(deleteLinksQuery, [songId], (deleteErr) => {
            if (deleteErr) return res.status(500).json({ error: "L·ªói khi x√≥a li√™n k·∫øt ngh·ªá sƒ© c≈©", details: deleteErr.message });

            // 3. Th√™m li√™n k·∫øt ngh·ªá sƒ© m·ªõi
            const newArtistLinks = parsedArtistIds.map(artistId => [songId, artistId]);
            if (newArtistLinks.length > 0) {
              const insertLinksQuery = "INSERT INTO song_artists (song_id, artist_id) VALUES ?";
              db.query(insertLinksQuery, [newArtistLinks], (insertErr) => {
                if (insertErr) return res.status(500).json({ error: "L·ªói khi th√™m li√™n k·∫øt ngh·ªá sƒ© m·ªõi", details: insertErr.message });
                res.json({ message: "C·∫≠p nh·∫≠t b√†i h√°t v√† li√™n k·∫øt ngh·ªá sƒ© th√†nh c√¥ng" });
              });
            } else {
              res.json({ message: "C·∫≠p nh·∫≠t b√†i h√°t th√†nh c√¥ng (kh√¥ng c√≥ ngh·ªá sƒ© li√™n k·∫øt)" });
            }
          });
        });
    });
  } catch (error) {
    res.status(500).json({ error: "L·ªói server kh√¥ng x√°c ƒë·ªãnh", details: error.message });
  }
};


// X√≥a b√†i h√°t (kh√¥ng c·∫ßn s·ª≠a v√¨ c√≥ ON DELETE CASCADE)
export const deleteSong = (req, res) => {
  const { id } = req.params;
  db.query("DELETE FROM songs WHERE id = ?", [id], (err, result) => {
    if (err) return res.status(500).json({ error: "L·ªói khi x√≥a b√†i h√°t" });
    if (result.affectedRows === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });
    res.json({ message: "X√≥a b√†i h√°t th√†nh c√¥ng" });
  });
};

// L·∫•y danh s√°ch th·ªÉ lo·∫°i unique
export const getGenres = (req, res) => {
  const query =
    "SELECT DISTINCT genre FROM songs WHERE genre IS NOT NULL ORDER BY genre";
  db.query(query, (err, results) => {
    if (err)
      return res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch th·ªÉ lo·∫°i" });
    res.json(results.map((row) => row.genre));
  });
};
// // T√¨m ki·∫øm b√†i h√°t (n√™n chuy·ªÉn sang /api/search)
// // H√†m n√†y gi·ªù kh√¥ng ch√≠nh x√°c v√¨ c·ªôt 'artist' kh√¥ng c√≤n
// export const searchSongs = (req, res) => {
//   // ... (N√™n x√≥a ho·∫∑c s·ª≠a l·∫°i ƒë·ªÉ join v·ªõi artists)
//   res.status(51).send("API n√†y c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t ho·∫∑c thay th·∫ø b·∫±ng /api/search");
// };

// // L·∫•y danh s√°ch ngh·ªá sƒ© unique (n√™n chuy·ªÉn sang artistController)
// // H√†m n√†y kh√¥ng c√≤n ƒë√∫ng
// export const getArtists = (req, res) => {
//   // ... (N√™n x√≥a h√†m n√†y v√† d√πng /api/artists)
//   res.status(51).send("API n√†y n√™n ƒë∆∞·ª£c thay th·∫ø b·∫±ng GET /api/artists");
// };

// L·∫•y b√†i h√°t theo ngh·ªá sƒ© (C·∫ßn s·ª≠a ho√†n to√†n)
export const getSongsByArtist = (req, res) => {
  const { artistName } = req.params; // Nh·∫≠n t√™n ngh·ªá sƒ©
  const decodedArtistName = decodeURIComponent(artistName);

  // 1. T√¨m artist_id t·ª´ t√™n
  const findArtistIdQuery = "SELECT id FROM artists WHERE name = ?";
  db.query(findArtistIdQuery, [decodedArtistName], (err, artistResults) => {
    if (err) return res.status(500).json({ error: "L·ªói t√¨m ID ngh·ªá sƒ©" });
    if (artistResults.length === 0) {
      return res.json([]); // Kh√¥ng t√¨m th·∫•y ngh·ªá sƒ© -> tr·∫£ v·ªÅ m·∫£ng r·ªóng
    }
    const artistId = artistResults[0].id;

    // 2. T√¨m song_id t·ª´ artist_id trong b·∫£ng trung gian
    const findSongIdsQuery = "SELECT song_id FROM song_artists WHERE artist_id = ?";
    db.query(findSongIdsQuery, [artistId], (err, songLinks) => {
      if (err) return res.status(500).json({ error: "L·ªói t√¨m b√†i h√°t c·ªßa ngh·ªá sƒ©" });
      if (songLinks.length === 0) {
        return res.json([]); // Ngh·ªá sƒ© n√†y kh√¥ng c√≥ b√†i h√°t n√†o
      }
      const songIds = songLinks.map(link => link.song_id);

      // 3. L·∫•y th√¥ng tin b√†i h√°t t·ª´ song_id
      const getSongsQuery = "SELECT id, title, album, genre, release_year, file_url, image_url, lyrics_url, created_at FROM songs WHERE id IN (?) ORDER BY title";
      db.query(getSongsQuery, [songIds], async (err, songs) => { // Th√™m async
        if (err) return res.status(500).json({ error: "L·ªói l·∫•y th√¥ng tin b√†i h√°t" });
        try {
          // L·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin ngh·ªá sƒ© cho c√°c b√†i h√°t n√†y
          const songsWithArtists = await fetchArtistsForSongs(songs);
          res.json(songsWithArtists);
        } catch (fetchErr) {
          res.status(500).json({ error: "L·ªói khi l·∫•y th√¥ng tin ngh·ªá sƒ©", details: fetchErr.message });
        }
      });
    });
  });
};

// L·∫•y b√†i h√°t theo th·ªÉ lo·∫°i (G·∫ßn nh∆∞ gi·ªØ nguy√™n, ch·ªâ b·ªè c·ªôt artist)
export const getSongsByGenre = (req, res) => {
  const { genre } = req.params;
  const query = "SELECT id, title, album, genre, release_year, file_url, image_url, lyrics_url, created_at FROM songs WHERE genre = ? ORDER BY title";
  db.query(query, [decodeURIComponent(genre)], async (err, songs) => { // Th√™m async
    if (err) return res.status(500).json({ error: "L·ªói khi l·∫•y b√†i h√°t theo th·ªÉ lo·∫°i" });
    try {
      const songsWithArtists = await fetchArtistsForSongs(songs);
      res.json(songsWithArtists);
    } catch (fetchErr) {
      res.status(500).json({ error: "L·ªói khi l·∫•y th√¥ng tin ngh·ªá sƒ©", details: fetchErr.message });
    }
  });
};