// // controllers/playlistController.js
import connection from "../config/db.js";

// T·∫°o playlist m·ªõi (s·ª≠ d·ª•ng req.user.id)
export const createPlaylist = (req, res) => {
  const { name, description } = req.body;
  const user_id = req.user.id; // L·∫•y t·ª´ token, kh√¥ng t·ª´ body

  if (!name) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin name" });
  }

  const sql = "INSERT INTO playlists (user_id, name, description) VALUES (?, ?, ?)";
  connection.query(sql, [user_id, name, description || null], (err, result) => {
    if (err) return res.status(500).json({ message: "L·ªói khi t·∫°o playlist", error: err });
    res.status(201).json({ message: "T·∫°o playlist th√†nh c√¥ng", playlist_id: result.insertId });
  });
};

// L·∫•y t·∫•t c·∫£ playlist c·ªßa 1 user (ki·ªÉm tra quy·ªÅn)
export const getPlaylistsByUser = (req, res) => {
  const user_id = req.params.user_id;

  // Ch·ªâ cho ph√©p user xem playlist c·ªßa ch√≠nh m√¨nh ho·∫∑c admin
  if (req.user.id.toString() !== user_id && req.user.role !== 'admin') {
    return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem playlist n√†y" });
  }

  const sql = "SELECT * FROM playlists WHERE user_id = ?";
  connection.query(sql, [user_id], (err, results) => {
    if (err) return res.status(500).json({ message: "L·ªói khi l·∫•y playlist", error: err });
    res.json(results);
  });
};

// Th√™m b√†i h√°t v√†o playlist (ki·ªÉm tra duplicate v√† quy·ªÅn s·ªü h·ªØu)
export const addSongToPlaylist = (req, res) => {
  const { playlist_id, song_id } = req.body;

  if (!playlist_id || !song_id) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin playlist_id ho·∫∑c song_id" });
  }

  // Ki·ªÉm tra playlist c√≥ thu·ªôc user kh√¥ng
  connection.query("SELECT user_id FROM playlists WHERE id = ?", [playlist_id], (err, results) => {
    if (err) return res.status(500).json({ message: "L·ªói ki·ªÉm tra playlist", error: err });
    if (results.length === 0 || results[0].user_id !== req.user.id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng s·ªü h·ªØu playlist n√†y" });
    }

    // Ki·ªÉm tra duplicate
    const checkSql = "SELECT * FROM playlist_songs WHERE playlist_id = ? AND song_id = ?";
    connection.query(checkSql, [playlist_id, song_id], (err, checkResults) => {
      if (err) return res.status(500).json({ message: "L·ªói ki·ªÉm tra duplicate", error: err });
      if (checkResults.length > 0) {
        return res.status(400).json({ message: "B√†i h√°t ƒë√£ t·ªìn t·∫°i trong playlist" });
      }

      const sql = "INSERT INTO playlist_songs (playlist_id, song_id) VALUES (?, ?)";
      connection.query(sql, [playlist_id, song_id], (err, result) => {
        if (err) return res.status(500).json({ message: "L·ªói khi th√™m b√†i h√°t v√†o playlist", error: err });
        res.status(201).json({ message: "ƒê√£ th√™m b√†i h√°t v√†o playlist" });
      });
    });
  });
};

// L·∫•y danh s√°ch b√†i h√°t trong 1 playlist (ki·ªÉm tra quy·ªÅn)
export const getSongsInPlaylist = (req, res) => {
  const playlist_id = req.params.playlist_id;

  // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
  connection.query("SELECT user_id FROM playlists WHERE id = ?", [playlist_id], (err, results) => {
    if (err) return res.status(500).json({ message: "L·ªói ki·ªÉm tra playlist", error: err });
    if (results.length === 0 || results[0].user_id !== req.user.id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng s·ªü h·ªØu playlist n√†y" });
    }

    const sql = `
      SELECT s.*
      FROM songs s
      JOIN playlist_songs ps ON s.id = ps.song_id
      WHERE ps.playlist_id = ?
    `;

    connection.query(sql, [playlist_id], (err, results) => {
      if (err) return res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch b√†i h√°t", error: err });
      res.json(results);
    });
  });
};

// ... other functions remain the same ...
// üü¢ X√≥a b√†i h√°t kh·ªèi playlist (m·ªõi th√™m)
export const removeSongFromPlaylist = (req, res) => {
  const { playlist_id, song_id } = req.body;

  if (!playlist_id || !song_id) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin playlist_id ho·∫∑c song_id" });
  }

  // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
  connection.query("SELECT user_id FROM playlists WHERE id = ?", [playlist_id], (err, results) => {
    if (err) return res.status(500).json({ message: "L·ªói ki·ªÉm tra playlist", error: err });
    if (results.length === 0 || results[0].user_id !== req.user.id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng s·ªü h·ªØu playlist n√†y" });
    }

    const sql = "DELETE FROM playlist_songs WHERE playlist_id = ? AND song_id = ?";
    connection.query(sql, [playlist_id, song_id], (err, result) => {
      if (err) return res.status(500).json({ message: "L·ªói khi x√≥a b√†i h√°t kh·ªèi playlist", error: err });
      if (result.affectedRows === 0) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i h√°t trong playlist" });
      }
      res.json({ message: "ƒê√£ x√≥a b√†i h√°t kh·ªèi playlist" });
    });
  });
};

// X√≥a playlist (ki·ªÉm tra quy·ªÅn)
export const deletePlaylist = (req, res) => {
  const { playlist_id } = req.params;

  // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
  connection.query("SELECT user_id FROM playlists WHERE id = ?", [playlist_id], (err, results) => {
    if (err) return res.status(500).json({ message: "L·ªói ki·ªÉm tra playlist", error: err });
    if (results.length === 0 || results[0].user_id !== req.user.id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng s·ªü h·ªØu playlist n√†y" });
    }

    const sql = "DELETE FROM playlists WHERE id = ?";
    connection.query(sql, [playlist_id], (err) => {
      if (err) return res.status(500).json({ message: "L·ªói khi x√≥a playlist", error: err });
      res.json({ message: "ƒê√£ x√≥a playlist" });
    });
  });
};

// C·∫≠p nh·∫≠t playlist
export const updatePlaylist = (req, res) => {
  const { playlist_id } = req.params;
  const { name, description } = req.body;
  const user_id = req.user.id;

  // 1. Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
  connection.query(
    "SELECT user_id FROM playlists WHERE id = ?",
    [playlist_id],
    (err, results) => {
      if (err)
        return res
          .status(500)
          .json({ message: "L·ªói ki·ªÉm tra playlist", error: err });
      if (results.length === 0)
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y playlist" });
      if (results[0].user_id !== user_id)
        return res.status(403).json({ message: "B·∫°n kh√¥ng s·ªü h·ªØu playlist n√†y" });

      // 2. Chu·∫©n b·ªã c√¢u l·ªánh UPDATE
      let updateFields = [];
      let values = [];

      if (name) {
        updateFields.push("name = ?");
        values.push(name);
      }
      
      // Cho ph√©p c·∫≠p nh·∫≠t description th√†nh r·ªóng
      if (description !== undefined) {
          updateFields.push("description = ?");
          values.push(description || null);
      }

      // 3. X·ª≠ l√Ω file thumbnail n·∫øu c√≥
      if (req.files && req.files.thumbnailFile) {
        // Gi·∫£ s·ª≠ b·∫°n l∆∞u thumbnail trong /uploads/thumbnails/
        const thumbnail_url = `/uploads/thumbnails/${req.files.thumbnailFile[0].filename}`;
        updateFields.push("thumbnail_url = ?");
        values.push(thumbnail_url);
      }

      if (updateFields.length === 0) {
        return res
          .status(400)
          .json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t!" });
      }

      // 4. Th·ª±c thi query
      values.push(playlist_id); // Th√™m playlist_id v√†o cu·ªëi cho ƒëi·ªÅu ki·ªán WHERE
      const sql = `UPDATE playlists SET ${updateFields.join(
        ", "
      )} WHERE id = ?`;

      connection.query(sql, values, (err, result) => {
        if (err)
          return res
            .status(500)
            .json({ message: "L·ªói khi c·∫≠p nh·∫≠t playlist", error: err });
        res.json({ message: "C·∫≠p nh·∫≠t playlist th√†nh c√¥ng!" });
      });
    }
  );
};