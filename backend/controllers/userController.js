// backend/controllers/userController.js
import bcrypt from "bcryptjs";
import db from "../config/db.js";

// ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
export const registerUser = async (req, res) => {
  const { username, password, full_name, age, email, phone } = req.body;

  if (!username || !password || !full_name || !email || !phone)
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!" });

  try {
    // Ki·ªÉm tra username ho·∫∑c email tr√πng
    db.query(
      "SELECT * FROM users WHERE username = ? OR email = ?",
      [username, email],
      async (err, result) => {
        if (err) return res.status(500).json({ error: err.message });
        if (result.length > 0)
          return res
            .status(400)
            .json({ message: "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c email ƒë√£ t·ªìn t·∫°i!" });

        const hashedPassword = await bcrypt.hash(password, 10);

        db.query(
          "INSERT INTO users (username, password, full_name, age, email, phone) VALUES (?, ?, ?, ?, ?, ?)",
          [username, hashedPassword, full_name, age, email, phone],
          (err, results) => {
            if (err) return res.status(500).json({ error: err.message });
            res.status(201).json({
              message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
              userId: results.insertId,
            });
          }
        );
      }
    );
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// L·∫•y danh s√°ch ng∆∞·ªùi d√πng (·∫©n m·∫≠t kh·∫©u)
export const getAllUsers = (req, res) => {
  db.query(
    "SELECT id, username, full_name, age, email, phone, role, avatar_url FROM users",
    (err, results) => {
      if (err) return res.status(500).json({ error: err.message });
      res.json(results);
    }
  );
};

// L·∫•y th√¥ng tin chi ti·∫øt user theo ID (cho profile ho·∫∑c admin view)
export const getUserById = (req, res) => {
  const { id } = req.params;
  db.query(
    "SELECT id, username, full_name, age, email, phone, role, avatar_url FROM users WHERE id = ?",
    [id],
    (err, results) => {
      if (err) return res.status(500).json({ error: err.message });
      if (results.length === 0)
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
      res.json(results[0]);
    }
  );
};

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
export const updateUser = async (req, res) => {
  const { id } = req.params; // ID c·ªßa user c·∫ßn c·∫≠p nh·∫≠t
  const loggedInUser = req.user; // User ƒëang ƒëƒÉng nh·∫≠p (l·∫•y t·ª´ token)

  // L·∫•y th√™m "role" t·ª´ request body
  const { username, password, full_name, age, email, phone, role } = req.body;

  // Ki·ªÉm tra quy·ªÅn: Ho·∫∑c l√† admin, ho·∫∑c l√† user t·ª± c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ch√≠nh m√¨nh
  if (loggedInUser.role !== "admin" && loggedInUser.id.toString() !== id) {
    return res
      .status(403)
      .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y" });
  }

  try {
    let updateFields = [];
    let values = [];

    // C√°c tr∆∞·ªùng th√¥ng tin c√° nh√¢n
    if (username) {
      updateFields.push("username = ?");
      values.push(username);
    }
    if (full_name) {
      updateFields.push("full_name = ?");
      values.push(full_name);
    }
    if (age) {
      updateFields.push("age = ?");
      values.push(age);
    }
    if (email) {
      updateFields.push("email = ?");
      values.push(email);
    }
    if (phone) {
      updateFields.push("phone = ?");
      values.push(phone);
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u n·∫øu c√≥
    if (password) {
      const hashedPassword = await bcrypt.hash(password, 10);
      updateFields.push("password = ?");
      values.push(hashedPassword);
    }

    // üëá 2. Th√™m logic c·∫≠p nh·∫≠t role (CH·ªà D√ÄNH CHO ADMIN)
    if (role && loggedInUser.role === "admin") {
      updateFields.push("role = ?");
      values.push(role);
    }

    // X·ª≠ l√Ω avatar n·∫øu c√≥ upload
    if (req.files && req.files.avatarFile) {
      const avatar_url = `/uploads/avatars/${req.files.avatarFile[0].filename}`;
      updateFields.push("avatar_url = ?");
      values.push(avatar_url);
    }

    if (updateFields.length === 0) {
      return res.status(400).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t!" });
    }

    values.push(id); // Th√™m id v√†o cu·ªëi m·∫£ng values cho ƒëi·ªÅu ki·ªán WHERE

    const sql = `UPDATE users SET ${updateFields.join(", ")} WHERE id = ?`;

    db.query(sql, values, (err, result) => {
      if (err) return res.status(500).json({ error: err.message });
      if (result.affectedRows === 0)
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });

      res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!" });
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// X√≥a ng∆∞·ªùi d√πng
export const deleteUser = (req, res) => {
  const { id } = req.params;
  db.query("DELETE FROM users WHERE id = ?", [id], (err, result) => {
    if (err) return res.status(500).json({ error: err.message });
    if (result.affectedRows === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    res.json({ message: "ƒê√£ x√≥a user th√†nh c√¥ng" });
  });
};

import jwt from "jsonwebtoken";

const JWT_SECRET = "supersecret"; // ho·∫∑c l·∫•y t·ª´ .env

// ƒêƒÉng nh·∫≠p
export const loginUser = (req, res) => {
  const { username, password } = req.body;

  if (!username || !password)
    return res
      .status(400)
      .json({ message: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u" });

  db.query(
    "SELECT * FROM users WHERE username = ?",
    [username],
    async (err, results) => {
      if (err) return res.status(500).json({ error: err.message });
      if (results.length === 0)
        return res
          .status(401)
          .json({ message: "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u" });

      const user = results[0];
      const isMatch = await bcrypt.compare(password, user.password);

      if (!isMatch)
        return res
          .status(401)
          .json({ message: "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u" });

      // Sinh token k√®m theo vai tr√≤
      const token = jwt.sign(
        {
          id: user.id,
          username: user.username,
          role: user.role || "user", // m·∫∑c ƒë·ªãnh user
        },
        JWT_SECRET,
        { expiresIn: "1d" }
      );

      res.json({
        message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
        token,
        user: {
          id: user.id,
          username: user.username,
          full_name: user.full_name,
          role: user.role,
        },
      });
    }
  );
};

// Th√™m l·ªãch s·ª≠ nghe nh·∫°c
export const addListenHistory = (req, res) => {
  const { song_id } = req.body;
  const user_id = req.user.id;

  if (!song_id) {
    return res.status(400).json({ message: "Thi·∫øu song_id" });
  }

  const sql = "INSERT INTO user_history (user_id, song_id) VALUES (?, ?)";
  db.query(sql, [user_id, song_id], (err, result) => {
    if (err) return res.status(500).json({ error: err.message });
    res.status(201).json({ message: "ƒê√£ th√™m v√†o l·ªãch s·ª≠ nghe" });
  });
};

export const getListenHistory = (req, res) => {
  const user_id = req.user.id;

  const sql = `
    SELECT
      s.id, s.title, s.album, s.genre, s.release_year, s.file_url, s.image_url, s.lyrics_url, s.created_at,
      uh.last_listened,
      JSON_ARRAYAGG(
        JSON_OBJECT('id', a.id, 'name', a.name)
      ) AS artists
    FROM (
      SELECT song_id, MAX(listened_at) as last_listened
      FROM user_history
      WHERE user_id = ?
      GROUP BY song_id
      ORDER BY last_listened DESC
      LIMIT 20
    ) uh
    JOIN songs s ON uh.song_id = s.id
    LEFT JOIN song_artists sa ON s.id = sa.song_id
    LEFT JOIN artists a ON sa.artist_id = a.id
    GROUP BY s.id
    ORDER BY uh.last_listened DESC;
  `;

  db.query(sql, [user_id], (err, results) => {
    if (err)
      return res
        .status(500)
        .json({ error: "L·ªói khi l·∫•y l·ªãch s·ª≠ nghe", details: err.message });

    // üëá S·ª¨A L·∫†I LOGIC PARSE ·ªû ƒê√ÇY
    const historyWithParsedArtists = results.map((song) => {
      let parsedArtists = []; // M·∫∑c ƒë·ªãnh l√† m·∫£ng r·ªóng
      if (song.artists) {
        // Ki·ªÉm tra xem c√≥ ph·∫£i l√† chu·ªói kh√¥ng tr∆∞·ªõc khi parse
        if (typeof song.artists === "string") {
          try {
            parsedArtists = JSON.parse(song.artists);
            // ƒê·∫£m b·∫£o k·∫øt qu·∫£ parse l√† m·∫£ng (ph√≤ng tr∆∞·ªùng h·ª£p JSON_OBJECT tr·∫£ v·ªÅ null n·∫øu kh√¥ng c√≥ artist)
            if (!Array.isArray(parsedArtists)) {
              // N·∫øu k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ JSON_ARRAYAGG l√† object null duy nh·∫•t, vd "[null]"
              if (
                parsedArtists &&
                typeof parsedArtists === "object" &&
                parsedArtists.id === null
              ) {
                parsedArtists = [];
              } else {
                console.warn(
                  `Expected array after parsing artists JSON for song ID ${song.id}, but got:`,
                  parsedArtists
                );
                parsedArtists = []; // fallback to empty array if parse result is unexpected
              }
            }
          } catch (e) {
            console.error(`L·ªói parse JSON artists cho song ID ${song.id}:`, e);
            parsedArtists = []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu parse l·ªói
          }
        } else if (Array.isArray(song.artists)) {
          // N·∫øu n√≥ ƒë√£ l√† m·ªôt m·∫£ng (driver t·ª± ƒë·ªông parse)
          // Ki·ªÉm tra xem c√≥ ph·∫£i l√† m·∫£ng ch·ª©a object null kh√¥ng (tr∆∞·ªùng h·ª£p b√†i h√°t kh√¥ng c√≥ ngh·ªá sƒ©)
          if (
            song.artists.length === 1 &&
            song.artists[0] &&
            song.artists[0].id === null
          ) {
            parsedArtists = [];
          } else {
            parsedArtists = song.artists;
          }
        }
      }
      return {
        ...song,
        artists: parsedArtists, // G√°n k·∫øt qu·∫£ ƒë√£ x·ª≠ l√Ω
      };
    });
    res.json(historyWithParsedArtists);
  });
};
